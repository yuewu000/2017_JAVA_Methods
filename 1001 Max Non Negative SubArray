Problem:
Find out the maximum sub-array of non negative numbers from an array.
The sub-array should be continuous. That is, a sub-array created by choosing the second and fourth element and skipping the third element is invalid.

Maximum sub-array is defined in terms of the sum of the elements in the sub-array. Sub-array A is greater than sub-array B if sum(A) > sum(B).

Example:

A : [1, 2, 5, -7, 2, 3]
The two sub-arrays are [1, 2, 5] [2, 3].
The answer is [1, 2, 5] as its sum is larger than [2, 3]
NOTE: If there is a tie, then compare with segment's length and return segment which has maximum length
NOTE 2: If there is still a tie, then return the segment with minimum starting index

Test Cases:
8 -1 2 3 -3 -4 1 4 -9
8 -1 2 3 -3 -4 1 4 0
4  1967513926 1540383426  -1303455736  -521595368

Public class Solution{
    public int[] maxset(int[] A) {
        int n = A.length;
        if (n == 0) return new int[0];
        int maxStart = -1, maxLen = 0;
        long maxSum = -1, sum = 0;
        int start = 0, len = 0;
        for(int i = 0; i < n; i ++){
            if (i == 0 && A[i] >= 0){
              start = 0;
              sum += A[i];
              len++;
            } 
            if (i > 0 && A[i] < 0 && A[i-1] >= 0){
                if (sum > maxSum || (sum == maxSum && len > maxLen)){
                    maxStart = start;
                    maxLen = len;
                    maxSum = sum;
                }
            }
            if (i > 0 && A[i] >=0 && A[i-1] < 0){
                start = i;
                sum = A[i];
                len = 1;
            }
            if (i > 0 && A[i] >=0 && A[i-1] >= 0){
                sum += A[i];
                len++;
            }
        }
        if (sum > maxSum || (sum == maxSum && len > maxLen)){
                    maxStart = start;
                    maxLen = len;
                    maxSum = sum;
        }
        if (maxStart == -1) return new int[0];
        else return Arrays.copyOfRange(A, maxStart, maxStart+maxLen);
    }
}
